const worker = new Worker(new URL("./worker.ts", import.meta.url), {
  type: "module",
});

const lastIds = new Map<string, string>();

worker.postMessage({
  id: crypto.randomUUID(),
  type: "init",
  payload: {
    network: {
      host: "192.168.1.48",
      port: 4998,
    },
  },
});

worker.onmessage = (event) => {
  console.log(event);
};

worker.addEventListener("error", (event) => {
  console.error(event);
});

import readline from "readline";

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

async function sendCommand(command: string) {
  worker.postMessage({
    id: crypto.randomUUID(),
    type: "command",
    payload: { command },
  });
}

function askTemperature() {
  console.clear(); // Limpa o terminal
  rl.question("Digite a temperatura: ", (command) => {
    switch (command) {
      case "16":
        worker.postMessage({
          id: crypto.randomUUID(),
          type: "command",
          payload: {
            command: "sendir,1:8,1,38000,1,1,343,172,20,65,20,65,20,21,20,21,20,21,20,21,20,65,20,65,20,65,20,65,20,65,20,21,20,21,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,65,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,22,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,65,20,21,20,65,20,21,20,21,20,65,20,65,20,2000",
          },
        });
        break;
      case "17":
        worker.postMessage({
          id: crypto.randomUUID(),
          type: "command",
          payload: {
            command: "sendir,1:8,1,38000,1,1,343,172,20,65,20,65,20,21,20,21,20,21,20,21,20,65,20,65,20,65,20,65,20,65,20,65,20,21,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,65,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,21,20,65,20,21,20,65,20,65,20,2000",
          },
        });
        break;
      case "18":
        worker.postMessage({
          id: crypto.randomUUID(),
          type: "command",
          payload: {
            command: "sendir,1:8,1,38000,1,1,345,173,20,65,20,65,20,22,20,22,20,22,20,22,20,65,20,65,20,65,20,65,20,65,20,22,20,65,20,22,20,65,20,22,20,22,20,22,20,22,20,22,20,22,20,65,20,65,20,65,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,65,20,22,20,65,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,65,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,65,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,22,20,65,20,22,20,65,20,65,20,22,20,65,20,65,20,2000",
          },
        });
        break;
      case "19":
        worker.postMessage({
          id: crypto.randomUUID(),
          type: "command",
          payload: {
            command: "sendir,1:8,1,38000,1,1,343,172,20,65,20,65,20,21,20,21,20,21,20,21,20,65,20,65,20,65,20,65,20,65,20,65,20,65,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,65,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,65,20,21,20,21,20,21,20,65,20,65,20,65,20,2000",
          },
        });
        break;
      case "20":
      case "21":
      case "22":
      case "23":
      case "24":
      case "25":
      case "26":
      case "27":
      case "28":
      case "29":
      case "30":
        worker.postMessage({
          id: crypto.randomUUID(),
          type: "command",
          payload: {
            command: "",
          },
        });
        break;
      default:
        console.log("Comando inválido");
    }
    // Em vez de fechar, chama a função novamente
    setTimeout(askTemperature, 100);
  });
}

// Inicia o loop
askTemperature();
